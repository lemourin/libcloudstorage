#!/usr/bin/env bash

if [ -z "$ANDROID_NDK_ROOT" ]; then
  echo "ANDROID_NDK_ROOT not set"
  exit 1
fi

if [ -z "$ANDROID_SDK_ROOT" ]; then
  echo "ANDROID_SDK_ROOT not set"
  exit 1
fi

if [ $# -lt 1 ]; then
  echo "Usage: $0 [ armv7a | aarch64 | x86 | x86_64 ]"
  exit 1
fi

BUILD=$1

if [ $BUILD == "armv7a" ]; then
  ARCH=armv7a-linux-androideabi
  CMAKE_ANDROID_ABI=armeabi-v7a
elif [ $BUILD == "aarch64" ]; then
  ARCH=aarch64-linux-android
  CMAKE_ANDROID_ABI=arm64-v8a
elif [ $BUILD == "x86" ]; then
  ARCH=i686-linux-android
  CMAKE_ANDROID_ABI=x86
elif [ $BUILD == "x86_64" ]; then
  ARCH=x86_64-linux-android
  CMAKE_ANDROID_ABI=x86_64
else
  echo "Unsupported arch $BUILD"
  exit 1
fi

MIN_API_LEVEL=21

command -v javac >/dev/null 2>&1 || { echo >&2 "javac is not installed"; exit 1; }
command -v cmake >/dev/null 2>&1 || { echo >&2 "cmake is not installed"; exit 1; }
command -v gcc >/dev/null 2>&1 || { echo >&2 "gcc is not installed"; exit 1; }
command -v perl >/dev/null 2>&1 || { echo >&2 "perl is not installed"; exit 1; }
command -v libtoolize >/dev/null 2>&1 || { echo >&2 "libtool not found"; exit 1; }
command -v aclocal >/dev/null 2>&1 || { echo >&2 "automake is not installed"; exit 1; }
command -v autom4te >/dev/null 2>&1 || { echo >&2 "autoconf is not installed"; exit 1; }
command -v pkg-config >/dev/null 2>&1 || { echo >&2 "pkg-config is not installed"; exit 1; }
command -v nasm >/dev/null 2>&1 || { echo >&2 "nasm is not installed"; exit 1; }
command -v make >/dev/null 2>&1 || { echo >&2 "make is not installed"; exit 1; }

HOST_ARCH=$(ls $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt | head -n 1)
CONCURRENCY=4
TOOLCHAIN=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake
GENERATOR="Unix Makefiles"

export INSTALL_PATH=$PWD/$ARCH$MIN_API_LEVEL
export PKG_CONFIG_LIBDIR=$INSTALL_PATH/lib/pkgconfig
export CMAKE_PREFIX_PATH=$INSTALL_PATH
export PATH=$INSTALL_PATH/bin:$PATH
export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH$MIN_API_LEVEL-clang
export CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH$MIN_API_LEVEL-clang++
if [ $BUILD == "armv7a" ]; then
  export RANLIB=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/arm-linux-androideabi-ranlib
  export AR=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/arm-linux-androideabi-ar
  export NM=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/arm-linux-androideabi-nm
else
  export RANLIB=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH-ranlib
  export AR=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH-ar
  export NM=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH-nm
fi
export CXXFLAGS="-fPIC -Oz"
export CFLAGS="-fPIC -Oz"
export LDFLAGS="-fPIC"

unpack() {
  if [[ ! -d $1 ]]; then
    tar xf $1.$2
    if [[ $? -ne 0 ]]; then
      echo "Couldn't extract $1.$2"
      exit 1
    fi
    cd $1
  else
    cd $1
  fi
}

fetch() {
  EXT=${2##*.}
  if [[ ! -f $2 ]]; then
    DEST=$(mktemp /tmp/build-android.XXXXXX)
    wget $1 -O $DEST
    if [[ $? -ne 0 ]]; then
      echo "Couldn't fetch $1"
      exit 1
    else
      mv $DEST $2
    fi
  fi
  unpack `basename $2 .tar.$EXT` tar.$EXT
}

fetch_url() {
  fetch $1 ${1##*/}
}

fetch_github() {
  TARBALL=${1##*/}
  REPO_URL=${1%%/archive/*}
  REPO_NAME=${REPO_URL##*/}
  NAME=${TARBALL##v}
  fetch $1 $REPO_NAME-$NAME
}

run_cmake() {
  cmake .. \
    -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN \
    -G "$GENERATOR" \
    -DCMAKE_INSTALL_PREFIX="$INSTALL_PATH" \
    -DBUILD_SHARED_LIBS=0 \
    -DANDROID_ABI="$CMAKE_ANDROID_ABI" \
    -DANDROID_PLATFORM=$MIN_API_LEVEL $@
}

run_make() {
  make -j $CONCURRENCY && make install
}

fetch_jsoncpp() {
  fetch_github https://github.com/open-source-parsers/jsoncpp/archive/$1.tar.gz
}

install_jsoncpp() {
  mkdir -p build
  cd build
  run_cmake -DJSONCPP_WITH_TESTS=0
  run_make
}

fetch_tinyxml2() {
  fetch_github https://github.com/leethomason/tinyxml2/archive/$1.tar.gz
}

install_tinyxml2() {
  mkdir -p build
  cd build
  run_cmake -DBUILD_STATIC_LIBS=1
  run_make
}

fetch_openssl() {
  fetch_url https://www.openssl.org/source/openssl-$1.tar.gz
}

install_openssl() {
  if [ $BUILD == "x86" ]; then
    SSL_TYPE="linux-x86";
  elif [ $BUILD == "x86_64" ]; then
    SSL_TYPE="linux-x86_64"
  elif [ $BUILD == "armv7a" ]; then
    SSL_TYPE="linux-armv4";
  elif [ $BUILD == "aarch64" ]; then
    SSL_TYPE="linux-aarch64";
  fi
  ./Configure --prefix=$INSTALL_PATH  --openssldir=$INSTALL_PATH/openssl $SSL_TYPE no-shared
  run_make
}

fetch_cares() {
  VERSION=${1//./_}
  fetch_github https://github.com/c-ares/c-ares/archive/cares-$VERSION.tar.gz
}

install_cares() {
  ./buildconf
  ./configure --prefix=$INSTALL_PATH --host=$ARCH$MIN_API_LEVEL --enable-static --disable-shared
  run_make
}

fetch_nghttp2() {
  fetch_url https://github.com/nghttp2/nghttp2/releases/download/v$1/nghttp2-$1.tar.gz
}

install_nghttp2() {
  ./buildconf
  ./configure --prefix=$INSTALL_PATH --enable-lib-only --enable-static --disable-shared --host=$ARCH$MIN_API_LEVEL
  run_make
}

fetch_curl() {
  fetch_url https://github.com/curl/curl/releases/download/curl-${1//./_}/curl-$1.tar.gz
}

install_curl() {
  ./configure --prefix=$INSTALL_PATH --with-ssl=$INSTALL_PATH --with-nghttp2 --enable-ares \
    --host=$ARCH$MIN_API_LEVEL --enable-static --disable-shared
  run_make
}

fetch_microhttpd() {
  fetch_url https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-$1.tar.gz
}

install_microhttpd() {
  ./configure --prefix=$INSTALL_PATH --host=$ARCH$MIN_API_LEVEL --enable-static --disable-shared
  run_make
}

fetch_cryptopp() {
  VERSION=${1//./_}
  fetch_github https://github.com/weidai11/cryptopp/archive/CRYPTOPP_$VERSION.tar.gz
}

install_cryptopp() {
  if [ $BUILD == "aarch64" ] || [ $BUILD == "x86_64" ]; then
    CRYPTOPP_EXTRA_FLAGS="-DCRYPTOPP_DISABLE_ASM";
  fi
  make -f GNUmakefile-cross -j $CONCURRENCY static \
    CXXFLAGS="$CXXFLAGS -I$ANDROID_NDK_ROOT/sources/android/cpufeatures $CRYPTOPP_EXTRA_FLAGS" libcryptopp.a && \
    make -f GNUmakefile-cross -j $CONCURRENCY install-lib PREFIX=$INSTALL_PATH
}

fetch_sqlite() {
  fetch_url https://www.sqlite.org/2018/sqlite-autoconf-$1.tar.gz
}

install_sqlite() {
  ./configure --prefix=$INSTALL_PATH --host=$ARCH$MIN_API_LEVEL --enable-static --disable-shared
  run_make
}

fetch_megasdk() {
  fetch_github https://github.com/meganz/sdk/archive/v$1.tar.gz
}

install_megasdk() {
  ./autogen.sh
  ./configure --prefix=$INSTALL_PATH \
    --without-freeimage \
    --disable-examples \
    --with-cryptopp=$INSTALL_PATH \
    --with-sqlite=$INSTALL_PATH \
    --with-openssl=$INSTALL_PATH \
    --with-cares=$INSTALL_PATH \
    --with-curl=$INSTALL_PATH \
    --host=$ARCH$MIN_API_LEVEL \
    --enable-static \
    --disable-shared
  make CXXFLAGS="-D_LIBCPP_HAS_NO_OFF_T_FUNCTIONS $CXXFLAGS" -j $CONCURRENCY && make install
}

fetch_ffmpeg() {
  fetch_url https://www.ffmpeg.org/releases/ffmpeg-$1.tar.gz
}

install_ffmpeg() {
  ./configure \
    --prefix=$INSTALL_PATH \
    --target-os=android \
    --cc=$CC \
    --cxx=$CXX \
    --nm=$NM \
    --ar=$AR \
    --ranlib=$RANLIB \
    --disable-doc \
    --disable-everything \
    --disable-asm \
    --enable-cross-compile \
    --enable-decoder="h264,hevc,vp8,vp9,mpeg4,mjpeg,theora,png,svg,bmp,webp,tiff,gif,aac,mp3,flac,ac3,opus,vorbis,wmv*,pcm*,subrip,dvdsub,xsub,webvtt" \
    --enable-demuxer="mov,avi,matroska,gif,mjpeg,image2,image_png_pipe,image_jpeg_pipe,image_bmp_pipe,image_tiff_pipe,image_webp_pipe,image_svg_pipe,wav,ac3,mp3,flac,ac3,ogg,pcm*" \
    --enable-protocol=http \
    --enable-parser=mjpeg \
    --enable-encoder=png,mjpeg \
    --enable-filter=thumbnail,buffer,buffer_sink,scale \
    --disable-avdevice \
    --disable-programs

  run_make
}

fetch_boost() {
  fetch_url https://boostorg.jfrog.io/artifactory/main/release/$1/source/boost_${1//./_}.tar.gz
}

install_boost() {
  ./bootstrap.sh
  cd libs/filesystem/build
  
  cat > user-config.jam << EOF
using clang : armv7a : $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH$MIN_API_LEVEL-clang++ ;
using clang : aarch64 : $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH$MIN_API_LEVEL-clang++ ;
using clang : x86 : $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH$MIN_API_LEVEL-clang++ ;
using clang : x86_64 : $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$HOST_ARCH/bin/$ARCH$MIN_API_LEVEL-clang++ ;
EOF

  HOME=$PWD ../../../b2 install \
    --prefix=$INSTALL_PATH \
    -toolset=$ARCH$MIN_API_LEVEL \
    cxxflags="$CXXFLAGS" \
    linkflags="$LDFLAGS" \
    link=static \
    runtime-link=static \
    target-os=android \
    toolset=clang-$BUILD && \
  rm user-config.jam
}

fetch_ecm() {
  fetch https://github.com/KDE/extra-cmake-modules/archive/v$1.tar.gz extra-cmake-modules-$1.tar.gz
}

install_ecm() {
  mkdir -p build && cd build && run_cmake && run_make
}

fetch_qt() {
  fetch_url https://download.qt.io/archive/qt/${1%.*}/$1/single/qt-everywhere-src-$1.tar.xz
  if [ ! -f .patched ]; then
    sed -i 's/pluginBaseName, \[\-\], _/pluginBaseName, \[\-.\], _/g' qtbase/mkspecs/features/resources_functions.prf &&
    sed -i 's/JNI_OnLoad/JNI_QtCore_OnLoad/g' qtbase/src/corelib/kernel/qjnionload.cpp &&
    sed -i 's/Q_CORE_EXPORT/JNIEXPORT/g' qtbase/src/corelib/kernel/qjnionload.cpp &&
    sed -i 's/JNI_OnLoad/JNI_QtAndroidExtras_OnLoad/g' qtandroidextras/src/androidextras/android/qjnionload.cpp &&
    sed -i 's|/\*reserved\*/|reserved|g' qtbase/src/plugins/platforms/android/androidjnimain.cpp &&
    sed -i 's/m_javaVM = vm;/m_javaVM = vm;\n    JNI_QtCore_OnLoad\(vm, reserved\);\n    JNI_QtAndroidExtras_OnLoad\(vm, reserved\);/g' \
      qtbase/src/plugins/platforms/android/androidjnimain.cpp &&
    sed -i 's/QT_END_NAMESPACE/QT_END_NAMESPACE\nJNIEXPORT jint JNICALL JNI_QtCore_OnLoad\(JavaVM\*, void\*\);\nJNIEXPORT jint JNICALL JNI_QtAndroidExtras_OnLoad\(JavaVM\*, void\*\);/g' \
      qtbase/src/plugins/platforms/android/androidjnimain.cpp &&
    touch .patched
  fi
}

install_qt() {
  mkdir -p build
  cd build

  ../configure \
    -prefix $INSTALL_PATH -opensource -confirm-license -qt-libpng \
    -I $INSTALL_PATH/include -L $INSTALL_PATH/lib \
    -xplatform android-clang \
    -static \
    -android-ndk $ANDROID_NDK_ROOT \
    -android-ndk-platform android-$MIN_API_LEVEL \
    -android-sdk $ANDROID_SDK_ROOT \
    -android-abis $CMAKE_ANDROID_ABI,arm64-v8a \
    -no-warnings-are-errors \
    -gui \
    -skip qt3d \
    -skip qtactiveqt \
    -skip qtcharts \
    -skip qtconnectivity \
    -skip qtdatavis3d \
    -skip qtdoc \
    -skip qtgamepad \
    -skip qtlocation \
    -skip qtlottie \
    -skip qtmacextras \
    -skip qtmultimedia \
    -skip qtnetworkauth \
    -skip qtpurchasing \
    -skip qtquick3d \
    -skip qtquicktimeline \
    -skip qtremoteobjects \
    -skip qtscript \
    -skip qtscxml \
    -skip qtsensors \
    -skip qtserialbus \
    -skip qtserialport \
    -skip qtspeech \
    -skip qtvirtualkeyboard \
    -skip qtwayland \
    -skip qtwebchannel \
    -skip qtwebengine \
    -skip qtwebglplugin \
    -skip qtwebsockets \
    -skip qtwinextras \
    -skip qtx11extras \
    -no-feature-designer \
    -nomake examples \
    -nomake tests &&

  make -j $CONCURRENCY && make install -j $CONCURRENCY &&

  sed -i "s/QAndroidIntegrationPlugin/QAndroidPlatformIntegrationPlugin/g" $INSTALL_PATH/lib/cmake/Qt5Gui/Qt5Gui_QAndroidIntegrationPlugin_Import.cpp
}

fetch_kirigami() {
  fetch_github https://github.com/KDE/kirigami/archive/v$1.tar.gz
  if [ ! -f .patched ]; then
    patch -p0 -i ../../patches/kirigami_qrc_in_fix.patch &&
      rm kirigami.qrc &&
      touch .patched
  fi
}

install_kirigami() {
  mkdir -p build &&
  cd build &&
  run_cmake .. \
    -DBUILD_SHARED_LIBS=1 \
    -DECM_DIR=$INSTALL_PATH/share/ECM/cmake \
    -DQt5Core_DIR=$INSTALL_PATH/lib/cmake/Qt5Core \
    -DQt5Quick_DIR=$INSTALL_PATH/lib/cmake/Qt5Quick \
    -DQt5Gui_DIR=$INSTALL_PATH//lib/cmake/Qt5Gui \
    -DQt5QmlModels_DIR=$INSTALL_PATH//lib/cmake/Qt5QmlModels \
    -DQt5Qml_DIR=$INSTALL_PATH/lib/cmake/Qt5Qml \
    -DQt5Network_DIR=$INSTALL_PATH/lib/cmake/Qt5Network \
    -DQt5Svg_DIR=$INSTALL_PATH/lib/cmake/Qt5Svg \
    -DQt5Widgets_DIR=$INSTALL_PATH/lib/cmake/Qt5Widgets \
    -DQt5QuickControls2_DIR=$INSTALL_PATH/lib/cmake/Qt5QuickControls2 \
    -DQt5LinguistTools_DIR=$INSTALL_PATH/lib/cmake/Qt5LinguistTools \
    -DQt5_DIR=$INSTALL_PATH/lib/cmake/Qt5 -DDISABLE_DBUS=1 &&
  make || true &&
  run_cmake .. \
    -DKDE_INSTALL_QMLDIR=$INSTALL_PATH/qml \
    -DQMLPLUGINDUMP_PROGRAM=$INSTALL_PATH/bin/qmlplugindump \
    -DDISABLE_DBUS=1 \
    -DBUILD_SHARED_LIBS=0 &&
  run_make &&
  cp ../src/kirigamiplugin.h $INSTALL_PATH/include
}

fetch_fribidi() {
  fetch_url https://github.com/fribidi/fribidi/releases/download/v$1/fribidi-$1.tar.bz2
}

install_fribidi() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared --host=$ARCH$MIN_API_LEVEL 
  run_make
}

fetch_freetype() {
  fetch_url https://download.savannah.gnu.org/releases/freetype/freetype-$1.tar.gz
}

install_freetype() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared --without-bzip2 --without-png --host=$ARCH$MIN_API_LEVEL && run_make
}

fetch_harfbuzz() {
  fetch_url https://github.com/harfbuzz/harfbuzz/releases/download/$1/harfbuzz-$1.tar.bz2
}

install_harfbuzz() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared --with-freetype --host=$ARCH$MIN_API_LEVEL 
  run_make
}

fetch_libass() {
  fetch_url https://github.com/libass/libass/releases/download/$1/libass-$1.tar.gz
}

install_libass() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared --disable-asm --host=$ARCH$MIN_API_LEVEL --disable-require-system-font-provider
  run_make
}

fetch_mpv() {
  fetch_github https://github.com/mpv-player/mpv/archive/v$1.tar.gz
}

install_mpv() {
  ./bootstrap.py
  ./waf configure --prefix=$INSTALL_PATH --disable-cplayer --enable-libmpv-static --disable-iconv
  ./waf install
}

install_run() {
  BASE_DIRECTORY=$PWD
  fetch_$1 $2
  if [[ ! -f .done ]]; then
    BUILD_DIRECTORY=$PWD
    install_$1 $2
    if [[ $? -eq 0 ]]; then
      cd $BUILD_DIRECTORY
      touch .done
    else
      echo "Failed to build $1"
      exit 1
    fi
  fi
  cd $BASE_DIRECTORY
}

install() {
  uppercase=`echo $1 | awk '{print toupper($0)}'`
  name=${uppercase}_INSTALL
  if [[ $INSTALL_LISTED -eq 1 ]]; then
    if [[ ${!name} -eq 1 ]]; then
      install_run $1 $2
    fi
  else
    if [[ "x${!name}" != "x0" ]]; then
      install_run $1 $2
    fi
  fi
}

INSTALL_LISTED=0

for i in $@; do
  if [[ "$i" == *without-* ]]; then
    component=${i##"--without-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    declare "${uppercase_component}_INSTALL"="0"
  fi

  if [[ "$i" == *with-* ]]; then
    component=${i##"--with-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    INSTALL_LISTED=1
    declare "${uppercase_component}_INSTALL"="1"
  fi
done

mkdir tarballs-$ARCH$MIN_API_LEVEL -p
cd tarballs-$ARCH$MIN_API_LEVEL

install "fribidi" 1.0.5
install "freetype" 2.10.2
install "harfbuzz" 2.3.0
install "libass" 0.14.0
install "openssl" 1.1.1k
install "jsoncpp" 1.9.3
install "tinyxml2" 6.0.0
install "cares" 1.15.0
install "nghttp2" 1.28.0
install "curl" 7.57.0
install "microhttpd" 0.9.58
install "cryptopp" 8.1.0
install "sqlite" 3240000
install "megasdk" 3.4.7
install "ffmpeg" 4.1.3
install "boost" 1.69.0
install "ecm" 5.66.0
install "qt" 5.15.0
install "kirigami" 5.66.0
install "mpv" 0.32.0
