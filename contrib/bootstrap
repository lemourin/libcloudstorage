#!/usr/bin/env bash

export ARCH=x86_64-linux-gnu
export INSTALL_PATH=$PWD/$ARCH
export PKG_CONFIG_LIBDIR=$INSTALL_PATH/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
export CMAKE_PREFIX_PATH=$INSTALL_PATH
export PATH=$INSTALL_PATH/bin:$PATH
CONCURRENCY=4

unpack() {
  if [[ ! -d $1 ]]; then
    tar xf $1.$2
    if [[ $? -ne 0 ]]; then
      echo "Couldn't extract $1.$2"
      exit 1
    fi
    cd $1
  else
    cd $1
  fi
}

fetch() {
  EXT=${2##*.}
  if [[ ! -f $2 ]]; then
    DEST=$(tempfile)
    wget $1 -O $DEST
    if [[ $? -ne 0 ]]; then
      echo "Couldn't fetch $1"
      exit 1
    else
      mv $DEST $2
    fi
  fi
  unpack `basename $2 .tar.$EXT` tar.$EXT
}

fetch_url() {
  fetch $1 ${1##*/}
}

fetch_github() {
  TARBALL=${1##*/}
  REPO_URL=${1%%/archive/*}
  REPO_NAME=${REPO_URL##*/}
  NAME=${TARBALL##v}
  fetch $1 $REPO_NAME-$NAME
}

run_make() {
  make -j $CONCURRENCY && make install
}

fetch_qt() {
  fetch_url https://download.qt.io/archive/qt/${1%.*}/$1/single/qt-everywhere-src-$1.tar.xz
  if [ ! -f .patched ]; then
    patch \
      qtbase/src/plugins/platformthemes/gtk3/qgtk3theme.cpp < \
      ../../patches/qt-force-gtk-file-dialog.patch
    if [ $? != 0 ]; then
      echo "Couldn't patch qt source."
      exit 1
    fi
    touch .patched
  fi
}

fetch_xkbcommon() {
  fetch_url http://xkbcommon.org/download/libxkbcommon-$1.tar.xz
}

install_xkbcommon() {
  ./configure --prefix=$INSTALL_PATH --disable-shared --enable-static LDFLAGS=-fPIC CFLAGS=-fPIC
  run_make
}

configure_qt() {
  sudo apt install -y \
    libdbus-1-dev \
    libnss3-dev \
    libegl1-mesa-dev \
    libgl1-mesa-dev \
    libxcomposite-dev \
    libxcursor-dev \
    libxdamage-dev \
    libxrandr-dev \
    libxss-dev \
    libxi-dev \
    libxtst-dev \
    libxcb-xkb-dev \
    libglib2.0-dev \
    libfontconfig1-dev \
    libfreetype6-dev \
    libfontconfig1-dev \
    libgtk-3-dev \
    bison \
    flex \
    gperf \
    autoconf \
    libtool

  mkdir -p build
  cd build

  ../configure \
    -prefix $INSTALL_PATH -opensource -confirm-license -fontconfig -system-freetype \
    -I $INSTALL_PATH/include -L $INSTALL_PATH/lib \
    OPENSSL_LIBS="-lssl -lcrypto" \
    -shared \
    -gtk \
    -qt-xcb \
    -openssl -openssl-linked \
    -nomake examples \
    -nomake tests

  QMAKE=$PWD/qtbase/bin/qmake
}

install_qt() {
  configure_qt

  make -j $CONCURRENCY \
    module-qtbase \
    module-qtdeclarative \
    module-qtquickcontrols \
    module-qtquickcontrols2 \
    module-qtsvg \
    module-qtgraphicaleffects \
    module-qttools

  make \
    module-qtwebchannel \
    module-qtwebengine \
    module-qtwebview

  make -j $CONCURRENCY \
    module-qtbase-install_subtargets \
    module-qtdeclarative-install_subtargets \
    module-qtquickcontrols-install_subtargets \
    module-qtquickcontrols2-install_subtargets \
    module-qtsvg-install_subtargets \
    module-qtgraphicaleffects-install_subtargets \
    module-qttools-install_subtargets

  make \
    module-qtwebchannel-install_subtargets \
    module-qtwebengine-install_subtargets \
    module-qtwebview-install_subtargets
}

fetch_cmake() {
  fetch_url https://cmake.org/files/v${1%.*}/cmake-$1.tar.gz
}

install_cmake() {
  mkdir -p build
  cd build

  ../configure --prefix=$INSTALL_PATH
  run_make
}

fetch_ecm() {
  fetch https://github.com/KDE/extra-cmake-modules/archive/v$1.tar.gz extra-cmake-modules-$1.tar.gz
}

install_ecm() {
  cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH
  run_make
}

fetch_ninja() {
  fetch https://github.com/ninja-build/ninja/archive/v$1.tar.gz ninja-$1.tar.gz
}

install_ninja() {
  ./configure.py --bootstrap
  mkdir -p $INSTALL_PATH/bin
  cp ninja $INSTALL_PATH/bin
}

fetch_kirigami() {
  fetch_github https://github.com/lemourin/kirigami/archive/$1.tar.gz
}

install_kirigami() {
  mkdir -p build
  cd build
  Qt5_DIR=$INSTALL_PATH cmake .. \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH \
    -DKDE_INSTALL_QMLDIR=$INSTALL_PATH/qml \
    -DQMLPLUGINDUMP_PROGRAM=$INSTALL_PATH/bin/qmlplugindump
  run_make
}

fetch_jsoncpp() {
  fetch_github https://github.com/open-source-parsers/jsoncpp/archive/$1.tar.gz
}

install_jsoncpp() {
  mkdir -p build
  cd build
  cmake .. -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DBUILD_SHARED_LIBS=1
  run_make
}

fetch_tinyxml2() {
  fetch_github https://github.com/leethomason/tinyxml2/archive/$1.tar.gz
}

install_tinyxml2() {
  mkdir -p build
  cd build
  cmake .. -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH
  run_make
}

fetch_openssl() {
  fetch_url https://www.openssl.org/source/openssl-$1.tar.gz
}

install_openssl() {
  ./config --prefix=$INSTALL_PATH  --openssldir=$INSTALL_PATH/openssl shared
  run_make
}

fetch_cares() {
  VERSION=${1//./_}
  fetch_github https://github.com/c-ares/c-ares/archive/cares-$VERSION.tar.gz
}

install_cares() {
  ./buildconf
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_nghttp2() {
  fetch_url https://github.com/nghttp2/nghttp2/releases/download/v$1/nghttp2-$1.tar.gz
}

install_nghttp2() {
  ./buildconf
  ./configure --prefix=$INSTALL_PATH --enable-lib-only
  run_make
}

fetch_curl() {
  fetch_url https://github.com/curl/curl/releases/download/curl-${1//./_}/curl-$1.tar.gz
}

install_curl() {
  ./configure --prefix=$INSTALL_PATH --with-nghttp2 --enable-ares
  run_make
}

fetch_microhttpd() {
  fetch_url https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-$1.tar.gz
}

install_microhttpd() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_cryptopp() {
  VERSION=${1//./_}
  fetch_github https://github.com/weidai11/cryptopp/archive/CRYPTOPP_$VERSION.tar.gz
}

install_cryptopp() {
  make -j $CONCURRENCY shared
  make -j $CONCURRENCY install PREFIX=$INSTALL_PATH
}

fetch_sqlite() {
  fetch_url https://www.sqlite.org/2018/sqlite-autoconf-$1.tar.gz
}

install_sqlite() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_megasdk() {
  fetch_github https://github.com/meganz/sdk/archive/v$1.tar.gz
}

install_megasdk() {
  ./autogen.sh
  ./configure --prefix=$INSTALL_PATH \
    --without-freeimage \
    --disable-examples \
    --with-cryptopp=$INSTALL_PATH \
    --with-sqlite=$INSTALL_PATH \
    --with-openssl=$INSTALL_PATH \
    --with-cares=$INSTALL_PATH \
    --with-curl=$INSTALL_PATH
  run_make
}

fetch_libxml2() {
  fetch http://xmlsoft.org/sources/libxml2-sources-$1.tar.gz libxml2-$1.tar.gz
}

install_libxml2() {
  mkdir -p build
  cd build
  ../configure \
    --prefix=$INSTALL_PATH \
    --enable-shared \
    --disable-static \
    --without-python
  run_make
}

fetch_ffmpeg() {
  fetch_url https://www.ffmpeg.org/releases/ffmpeg-$1.tar.gz
}

install_ffmpeg() {
  if [ ! $(command -v yasm) ]; then
    sudo apt install -y yasm
  fi

  ./configure \
    --prefix=$INSTALL_PATH \
    --enable-openssl \
    --enable-shared \
    --disable-static \
    --enable-libass \
    --enable-libxml2
  run_make
}

fetch_ogg() {
  fetch_url http://downloads.xiph.org/releases/ogg/libogg-$1.tar.gz
}

install_ogg() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_opus() {
  fetch_url https://archive.mozilla.org/pub/opus/opus-$1.tar.gz
}

install_opus() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_vorbis() {
  fetch_url http://downloads.xiph.org/releases/vorbis/libvorbis-$1.tar.gz
}

install_vorbis() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_ebml() {
  fetch_github https://github.com/Matroska-Org/libebml/archive/release-$1.tar.gz
}

install_ebml() {
  mkdir -p build
  cd build
  cmake .. \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DBUILD_SHARED_LIBS=YES
  run_make
}

fetch_matroska() {
  fetch_github https://github.com/Matroska-Org/libmatroska/archive/release-$1.tar.gz
}

install_matroska() {
  mkdir -p build
  cd build
  cmake .. \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DBUILD_SHARED_LIBS=YES
  run_make
}

fetch_fribidi() {
  fetch_url https://github.com/fribidi/fribidi/releases/download/v$1/fribidi-$1.tar.bz2
}

install_fribidi() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_harfbuzz() {
  fetch_url https://github.com/harfbuzz/harfbuzz/releases/download/$1/harfbuzz-$1.tar.bz2
}

install_harfbuzz() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_libass() {
  fetch_url https://github.com/libass/libass/releases/download/$1/libass-$1.tar.gz
}

install_libass() {
  ./configure --prefix=$INSTALL_PATH
  run_make
}

fetch_vlc() {
  fetch_url http://get.videolan.org/vlc/$1/vlc-$1.tar.xz
}

install_vlc() {
  sudo apt install -y \
    libxcb-shm0-dev \
    libxcb-composite0-dev \
    libxcb-xv0-dev \
    libxml2-dev \
    libasound2-dev \
    libpulse-dev

  mkdir -p build
  cd build

  ../configure --prefix=$INSTALL_PATH \
    --disable-lua --disable-a52 --disable-qt --disable-chromecast
  run_make
}

fetch_vlcqt() {
  fetch_github https://github.com/vlc-qt/vlc-qt/archive/$1.tar.gz
}

install_vlcqt() {
  mkdir -p build
  cd build
  CXXFLAGS="-I$INSTALL_PATH/include/vlc/plugins $CXXFLAGS" cmake .. \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH
  run_make
  rm $INSTALL_PATH/qml/VLCQt -rf
}

fetch_boost() {
  fetch_url https://dl.bintray.com/boostorg/release/$1/source/boost_${1//./_}.tar.gz
}

install_boost() {
  ./bootstrap.sh
  cd libs/filesystem/build
  ../../../b2 install --prefix=$INSTALL_PATH
}

fetch_fuse3() {
  fetch_github https://github.com/libfuse/libfuse/archive/fuse-$1.tar.gz
}

install_fuse3() {
  mkdir -p build
  cd build
  meson .. --prefix=$INSTALL_PATH --libdir=lib
  ninja install || echo 0
}

fetch_mpv() {
  fetch_github https://github.com/mpv-player/mpv/archive/v$1.tar.gz
}

install_mpv() {
  ./bootstrap.py
  ./waf configure --prefix=$INSTALL_PATH --disable-cplayer --enable-libmpv-shared
  ./waf install
}

install_run() {
  BASE_DIRECTORY=$PWD
  fetch_$1 $2
  if [[ ! -f .done ]]; then
    BUILD_DIRECTORY=$PWD
    install_$1 $2
    if [[ $? -eq 0 ]]; then
      cd $BUILD_DIRECTORY
      touch .done
    else
      echo "Failed to build $1"
      exit 1
    fi
  fi
  cd $BASE_DIRECTORY
}

install() {
  uppercase=`echo $1 | awk '{print toupper($0)}'`
  name=${uppercase}_INSTALL
  if [[ $INSTALL_LISTED -eq 1 ]]; then
    if [[ ${!name} -eq 1 ]]; then
      install_run $1 $2
    fi
  else
    if [[ "x${!name}" != "x0" ]]; then
      install_run $1 $2
    fi
  fi
}

INSTALL_LISTED=0

for i in $@; do
  if [[ "$i" == *without-* ]]; then
    component=${i##"--without-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    declare "${uppercase_component}_INSTALL"="0"
  fi

  if [[ "$i" == *with-* ]]; then
    component=${i##"--with-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    INSTALL_LISTED=1
    declare "${uppercase_component}_INSTALL"="1"
  fi
done

mkdir tarballs -p
cd tarballs

install "cmake" 3.12.1
install "ecm" 5.54.0
install "ninja" 1.8.2
install "openssl" 1.0.2p
install "xkbcommon" 0.5.0
install "qt" 5.12.1
install "kirigami" 33e64ff8eedecedf9560c836fd94a851db066515
install "jsoncpp" 1.8.3
install "tinyxml2" 6.0.0
install "cares" 1.13.0
install "nghttp2" 1.28.0
install "curl" 7.57.0
install "microhttpd" 0.9.58
install "cryptopp" 7.0.0
install "sqlite" 3240000
install "megasdk" 3.4.4
install "fribidi" 1.0.5
install "harfbuzz" 2.3.0
install "libass" 0.14.0
install "opus" 1.2.1
install "ogg" 1.3.3
install "vorbis" 1.3.6
install "ebml" 1.3.6
install "matroska" 1.4.9
install "libxml2" 2.9.7
install "ffmpeg" 4.1.3
install "vlc" 3.0.4
install "vlcqt" 1.1.1
install "mpv" 0.29.1
install "boost" 1.67.0
install "fuse3" 3.2.1
