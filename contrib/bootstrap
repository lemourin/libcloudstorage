#!/usr/bin/env bash

export ARCH=x86_64-linux-gnu
export INSTALL_PATH=$PWD/$ARCH
export PKG_CONFIG_PATH=$INSTALL_PATH/lib/pkgconfig
export CMAKE_PREFIX_PATH=$INSTALL_PATH
export PATH=$INSTALL_PATH/bin:$PATH
export CXXFLAGS=-fPIC
export CFLAGS=-fPIC
CONCURRENCY=4

command -v wget >/dev/null 2>&1 || { echo >&2 "wget is not installed"; exit 1; }
command -v gcc >/dev/null 2>&1 || { echo >&2 "gcc is not installed"; exit 1; }
command -v g++ >/dev/null 2>&1 || { echo >&2 "g++ is not installed"; exit 1; }
command -v libtoolize >/dev/null 2>&1 || { echo >&2 "libtool is not installed"; exit 1; }
command -v aclocal >/dev/null 2>&1 || { echo >&2 "automake is not installed"; exit 1; }
command -v nasm >/dev/null 2>&1 || { echo >&2 "nasm is not installed"; exit 1; }
command -v meson >/dev/null 2>&1 || { echo >&2 "meson is not installed"; exit 1; }
command -v bison >/dev/null 2>&1 || { echo >&2 "bison is not installed"; exit 1; }

pkg-config --cflags alsa >/dev/null 2>&1 || { echo >&2 "libasound2-dev is not installed"; exit 1; }
pkg-config --cflags freetype2 >/dev/null 2>&1 || { echo >&2 "libfreetype6-dev is not installed"; exit 1; }
pkg-config --cflags fontconfig >/dev/null 2>&1 || { echo >&2 "libfontconfig1-dev is not installed"; exit 1; }
pkg-config --cflags xcb-xkb >/dev/null 2>&1 || { echo >&2 "libxcb-xkb-dev is not installed"; exit 1; }
pkg-config --cflags glib-2.0 gthread-2.0 >/dev/null 2>&1 || { echo >&2 "libglib2.0-dev is not installed"; exit 1; }
pkg-config --cflags gtk+-3.0 >/dev/null 2>&1 || { echo >&2 "libgtk-3-dev is not installed"; exit 1; }
pkg-config --cflags gl >/dev/null 2>&1 || { echo >&2 "libgl1-mesa-dev is not installed"; exit 1; }
pkg-config --cflags xinerama >/dev/null 2>&1 || { echo >&2 "libxcb-xinerama0-dev is not installed"; exit 1; }
pkg-config --cflags xrender >/dev/null 2>&1 || { echo >&2 "libxcb-render-util0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-icccm >/dev/null 2>&1 || { echo >&2 "libxcb-icccm4-dev is not installed"; exit 1; }
pkg-config --cflags xcb-shm >/dev/null 2>&1 || { echo >&2 "libxcb-shm0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-keysyms >/dev/null 2>&1 || { echo >&2 "libxcb-keysyms1-dev is not installed"; exit 1; }
pkg-config --cflags xcb-image >/dev/null 2>&1 || { echo >&2 "libxcb-image0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-randr > /dev/null 2>&1 || { echo >&2 "libxcb-randr0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-renderutil > /dev/null 2>&1 || { echo >&2 "libxcb-render-util0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-shape > /dev/null 2>&1 || { echo >&2 "libxcb-shape0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-sync > /dev/null 2>&1 || { echo >&2 "libxcb-sync-dev is not installed"; exit 1; }
pkg-config --cflags xcb-xfixes > /dev/null 2>&1 || { echo >&2 "libxcb-xfixes0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-xinerama > /dev/null 2>&1 || { echo >&2 "libxcb-xinerama0-dev is not installed"; exit 1; }
pkg-config --cflags xcb-glx > /dev/null 2>&1 || { echo >&2 "libxcb-glx0-dev is not installed"; exit 1; }
pkg-config --cflags x11-xcb > /dev/null 2>&1 || { echo >&2 "libx11-xcb-dev is not installed"; exit 1; }

export PKG_CONFIG_LIBDIR=$PKG_CONFIG_PATH

unpack() {
  if [[ ! -d $1 ]]; then
    tar xf $1.$2
    if [[ $? -ne 0 ]]; then
      echo "Couldn't extract $1.$2"
      exit 1
    fi
    cd $1
  else
    cd $1
  fi
}

fetch() {
  EXT=${2##*.}
  if [[ ! -f $2 ]]; then
    DEST=$(tempfile)
    wget $1 -O $DEST
    if [[ $? -ne 0 ]]; then
      echo "Couldn't fetch $1"
      exit 1
    else
      mv $DEST $2
    fi
  fi
  unpack `basename $2 .tar.$EXT` tar.$EXT
}

fetch_url() {
  fetch $1 ${1##*/}
}

fetch_github() {
  TARBALL=${1##*/}
  REPO_URL=${1%%/archive/*}
  REPO_NAME=${REPO_URL##*/}
  NAME=${TARBALL##v}
  fetch $1 $REPO_NAME-$NAME
}

run_make() {
  make -j $CONCURRENCY && make install
}

fetch_zlib() {
  fetch_url https://zlib.net/zlib-$1.tar.gz
}

install_zlib() {
  ./configure --prefix=$INSTALL_PATH --static && run_make
}

fetch_qt() {
  fetch_url https://download.qt.io/archive/qt/${1%.*}/$1/single/qt-everywhere-src-$1.tar.xz
  if [ ! -f .patched ]; then
    sed -i -E "s/return gtk_check_version(3, 15, 5) == 0/return true/g" qtbase/src/plugins/platformthemes/gtk3/qgtk3theme.cpp &&
    touch .patched
  fi
}

fetch_xkbcommon() {
  fetch_url http://xkbcommon.org/download/libxkbcommon-$1.tar.xz
}

install_xkbcommon() {
  unset PKG_CONFIG_LIBDIR &&
  ./configure --prefix=$INSTALL_PATH --disable-shared --enable-static LDFLAGS=-fPIC CFLAGS=-fPIC &&
  run_make &&
  export PKG_CONFIG_LIBDIR=$PKG_CONFIG_PATH
}

install_qt() {
  unset PKG_CONFIG_LIBDIR

  mkdir -p build
  cd build

  ../configure \
    -prefix $INSTALL_PATH -opensource -confirm-license -fontconfig -system-freetype -qt-libpng \
    -I $INSTALL_PATH/include -L $INSTALL_PATH/lib \
    -openssl -openssl-linked \
    OPENSSL_LIBS="-lssl -lcrypto -pthread -ldl" \
    -static \
    -gtk \
    -xcb \
    -nomake examples \
    -nomake tests &&

  make -j $CONCURRENCY \
    module-qtbase \
    module-qtdeclarative \
    module-qtquickcontrols \
    module-qtquickcontrols2 \
    module-qtsvg \
    module-qtgraphicaleffects \
    module-qttools &&

  make -j $CONCURRENCY \
    module-qtbase-install_subtargets \
    module-qtdeclarative-install_subtargets \
    module-qtquickcontrols-install_subtargets \
    module-qtquickcontrols2-install_subtargets \
    module-qtsvg-install_subtargets \
    module-qtgraphicaleffects-install_subtargets \
    module-qttools-install_subtargets &&

  export PKG_CONFIG_LIBDIR=$PKG_CONFIG_PATH
}

fetch_cmake() {
  fetch_url https://cmake.org/files/v${1%.*}/cmake-$1.tar.gz
}

install_cmake() {
  mkdir -p build
  cd build

  ../configure --prefix=$INSTALL_PATH
  run_make
}

fetch_ecm() {
  fetch https://github.com/KDE/extra-cmake-modules/archive/v$1.tar.gz extra-cmake-modules-$1.tar.gz
}

install_ecm() {
  cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH
  run_make
}

fetch_ninja() {
  fetch https://github.com/ninja-build/ninja/archive/v$1.tar.gz ninja-$1.tar.gz
}

install_ninja() {
  ./configure.py --bootstrap
  mkdir -p $INSTALL_PATH/bin
  cp ninja $INSTALL_PATH/bin
}

fetch_kirigami() {
  fetch_github https://github.com/KDE/kirigami/archive/v$1.tar.gz
  if [ ! -f .patched ]; then
    patch -p0 -i ../../patches/kirigami_qrc_in_fix.patch &&
      rm kirigami.qrc &&
      touch .patched
  fi
}

install_kirigami() {
  mkdir -p build &&
  cd build &&
  cmake .. \
    -DBUILD_SHARED_LIBS=1 \
    -DQt5_DIR=$INSTALL_PATH/lib/cmake/Qt5 -DDISABLE_DBUS=1 &&
  make || true &&
  cmake .. \
    -DQt5_DIR=$INSTALL_PATH \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH \
    -DKDE_INSTALL_QMLDIR=$INSTALL_PATH/qml \
    -DQMLPLUGINDUMP_PROGRAM=$INSTALL_PATH/bin/qmlplugindump \
    -DDISABLE_DBUS=1 \
    -DBUILD_SHARED_LIBS=0 &&
  run_make &&
  cp ../src/kirigamiplugin.h $INSTALL_PATH/include
}

fetch_jsoncpp() {
  fetch_github https://github.com/open-source-parsers/jsoncpp/archive/$1.tar.gz
}

install_jsoncpp() {
  mkdir -p build
  cd build
  cmake .. -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DBUILD_SHARED_LIBS=0
  run_make
}

fetch_tinyxml2() {
  fetch_github https://github.com/leethomason/tinyxml2/archive/$1.tar.gz
}

install_tinyxml2() {
  mkdir -p build
  cd build
  cmake .. -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DBUILD_SHARED_LIBS=0 -DBUILD_STATIC_LIBS=1
  run_make
}

fetch_openssl() {
  fetch_url https://www.openssl.org/source/openssl-$1.tar.gz
}

install_openssl() {
  ./config --prefix=$INSTALL_PATH  --openssldir=$INSTALL_PATH/openssl no-shared
  run_make
}

fetch_cares() {
  VERSION=${1//./_}
  fetch_github https://github.com/c-ares/c-ares/archive/cares-$VERSION.tar.gz
}

install_cares() {
  ./buildconf
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared
  run_make
}

fetch_nghttp2() {
  fetch_url https://github.com/nghttp2/nghttp2/releases/download/v$1/nghttp2-$1.tar.gz
}

install_nghttp2() {
  ./buildconf
  ./configure --prefix=$INSTALL_PATH --enable-lib-only --enable-static --disable-shared
  run_make
}

fetch_curl() {
  fetch_url https://github.com/curl/curl/releases/download/curl-${1//./_}/curl-$1.tar.gz
}

install_curl() {
  LIBS="-ldl -lpthread" ./configure --prefix=$INSTALL_PATH --with-nghttp2 --enable-ares \
    --enable-static \
    --disable-shared \
    --with-ssl=$INSTALL_PATH
  run_make
}

fetch_microhttpd() {
  fetch_url https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-$1.tar.gz
}

install_microhttpd() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared
  run_make
}

fetch_cryptopp() {
  VERSION=${1//./_}
  fetch_github https://github.com/weidai11/cryptopp/archive/CRYPTOPP_$VERSION.tar.gz
}

install_cryptopp() {
  make -j $CONCURRENCY static
  make -j $CONCURRENCY install PREFIX=$INSTALL_PATH
}

fetch_sqlite() {
  fetch_url https://www.sqlite.org/2018/sqlite-autoconf-$1.tar.gz
}

install_sqlite() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared
  run_make
}

fetch_megasdk() {
  fetch_github https://github.com/meganz/sdk/archive/v$1.tar.gz
}

install_megasdk() {
  ./autogen.sh
  LIBS="-L$INSTALL_PATH/lib -lcares -lnghttp2 -lz" ./configure --prefix=$INSTALL_PATH \
    --without-freeimage \
    --disable-examples \
    --enable-static --disable-shared \
    --disable-curl-checks \
    --with-cryptopp=$INSTALL_PATH \
    --with-sqlite=$INSTALL_PATH \
    --with-openssl=$INSTALL_PATH \
    --with-cares=$INSTALL_PATH \
    --with-curl=$INSTALL_PATH \
    --with-zlib=$INSTALL_PATH &&
  run_make
}

fetch_libxml2() {
  fetch http://xmlsoft.org/sources/libxml2-sources-$1.tar.gz libxml2-$1.tar.gz
}

install_libxml2() {
  mkdir -p build
  cd build
  ../configure \
    --prefix=$INSTALL_PATH \
    --enable-static \
    --disable-shared \
    --without-python
  run_make
}

fetch_ffmpeg() {
  fetch_url https://www.ffmpeg.org/releases/ffmpeg-$1.tar.gz
}

install_ffmpeg() {
  ./configure \
    --prefix=$INSTALL_PATH \
    --enable-openssl \
    --enable-static \
    --disable-shared \
    --enable-libass \
    --enable-libxml2 \
    --extra-libs="-L$INSTALL_PATH/lib -lz -lm -ldl -pthread" &&
  run_make
}

fetch_fribidi() {
  fetch_url https://github.com/fribidi/fribidi/releases/download/v$1/fribidi-$1.tar.bz2
}

install_fribidi() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared
  run_make
}

fetch_harfbuzz() {
  fetch_url https://github.com/harfbuzz/harfbuzz/releases/download/$1/harfbuzz-$1.tar.bz2
}

install_harfbuzz() {
  unset PKG_CONFIG_LIBDIR &&
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared --with-freetype &&
  run_make &&
  PKG_CONFIG_LIBDIR=$PKG_CONFIG_PATH
}

fetch_libass() {
  fetch_url https://github.com/libass/libass/releases/download/$1/libass-$1.tar.gz
}

install_libass() {
  ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared
  run_make
}

fetch_boost() {
  fetch_url https://boostorg.jfrog.io/artifactory/main/release/$1/source/boost_${1//./_}.tar.gz
}

install_boost() {
  ./bootstrap.sh
  cd libs/filesystem/build
  ../../../b2 install --prefix=$INSTALL_PATH link=static runtime-link=static
}

fetch_fuse3() {
  fetch_github https://github.com/libfuse/libfuse/archive/fuse-$1.tar.gz
}

install_fuse3() {
  mkdir -p build &&
  cd build &&
  meson .. --prefix=$INSTALL_PATH --libdir=lib &&
  ninja &&
  ninja install || echo 0
}

fetch_mpv() {
  fetch_github https://github.com/mpv-player/mpv/archive/v$1.tar.gz
}

install_mpv() {
  ./bootstrap.py
  ./waf configure --prefix=$INSTALL_PATH --disable-cplayer --enable-libmpv-static
  ./waf install
}

install_run() {
  BASE_DIRECTORY=$PWD
  fetch_$1 $2
  if [[ ! -f .done ]]; then
    BUILD_DIRECTORY=$PWD
    install_$1 $2
    if [[ $? -eq 0 ]]; then
      cd $BUILD_DIRECTORY
      touch .done
    else
      echo "Failed to build $1"
      exit 1
    fi
  fi
  cd $BASE_DIRECTORY
}

install() {
  uppercase=`echo $1 | awk '{print toupper($0)}'`
  name=${uppercase}_INSTALL
  if [[ $INSTALL_LISTED -eq 1 ]]; then
    if [[ ${!name} -eq 1 ]]; then
      install_run $1 $2
    fi
  else
    if [[ "x${!name}" != "x0" ]]; then
      install_run $1 $2
    fi
  fi
}

INSTALL_LISTED=0

for i in $@; do
  if [[ "$i" == *without-* ]]; then
    component=${i##"--without-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    declare "${uppercase_component}_INSTALL"="0"
  fi

  if [[ "$i" == *with-* ]]; then
    component=${i##"--with-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    INSTALL_LISTED=1
    declare "${uppercase_component}_INSTALL"="1"
  fi
done

mkdir tarballs -p
cd tarballs

install "zlib" 1.2.11
install "cmake" 3.12.1
install "ecm" 5.66.0
install "ninja" 1.8.2
install "openssl" 1.1.1
install "xkbcommon" 0.5.0
install "qt" 5.15.0
install "kirigami" 5.66.0
install "jsoncpp" 1.9.3
install "tinyxml2" 6.0.0
install "cares" 1.13.0
install "nghttp2" 1.28.0
install "curl" 7.57.0
install "microhttpd" 0.9.58
install "cryptopp" 7.0.0
install "sqlite" 3240000
install "megasdk" 3.4.4
install "fribidi" 1.0.5
install "harfbuzz" 2.3.0
install "libass" 0.14.0
install "libxml2" 2.9.7
install "ffmpeg" 4.1.3
install "mpv" 0.29.1
install "boost" 1.67.0
install "fuse3" 3.2.1
